<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAAAAAAAEAIAC9DwAAFgAAAIlQTkcNChoKAAAADUlIRFIAAAEAAAABAAgEAAAA9ntg7QAAD4RJ
        REFUeNrt3Xl0lfWdx/F3boJJbhJCAoEAqUHZF0EQcCwp29EKbZlq69jxdMYRx62FYq21+9TjqZ4O9qDj
        jo5bRxCqg/ZYqXAUkE2dAsUgMbInBAMhYU8uCVnu/JGbkHvvs9ztuVnu5/Ucz8GbJ9wvv+f7/J7f7/c8
        v98DIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIi
        IiIiIiIiIiIiIhKJpIh+x42bTNy4SYvob5DY8VKPBw+1ePDgdTYBchnCVYyjkELySCGZZJLC/1KJ4Qns
        pZlmmqimnHJ2s4MyTsY+AXoznuuZxQhySFG5d1lNnGIvG1jLLs7GKgHymMstTKGvyrfbOME2VvAe1dEm
        QDY3cjtTSVWZdjsN/I2XeZszkSZAMtO4jzmkqSy7rXrW8DhbaTY/yGb68BMeZYqu+N1aCqOYQyqfUR9e
        AoxmCfeQrRLsAbL4GsMooSb0BChiKV+3qB2ke0lmLFMp5XBoCTCXZ5igUuthBvNVDrLfPgHm8BzDVF49
        UD+msScwBQITYBrPMFxl1UP14So+pcI8AUawlCtVTj1YHmPZxAnjBOjNYr6hMurhCshhHQ3BCZDEAhap
        158ARnKKT4IT4CqW0E+lkwBSGMlmjvongJtHmK6ySRB9cLOWRgCX76Pr+bbKJYF8m+tb/9CaAFnMJ0ul
        kkDaj3hrAsxkpsokwfiOuQtI5Wad/wlYB9xMamsCDFXzLyFNZ2hrAsymQKWRgAqYDS7cTG/vC0gicTEd
        t4uBuvWbsCYw0MVE8lUSCSqfiS7GqweQsLIY72KoJnclrCSGuhiqckhgQ11qASS0fBeZKoUElplChkqh
        S2jmOJ9RTg0nSaIv/bicseQ53ELLSKLFsa/w2k4c74wBKLuYOqNJXMsG1rCFMjw0+T5LIZNhFPENikh3
        rjScnN1/giWcNi1QLwX8KO5d0OM8yRmLmAr5QZzrxEY28xxrOWfy8xzmcQ9TnZum43VsO2rzgHkRJx38
        duOtgiGWMc3mdFzjOcmvQngQbxCLqXUmAicr4XQutfz5YAerNjMZfKULxVTGj3jUeM6en0p+ywMccyIE
        J58CTmeQ5c/zO2HVAfuYLolbLEdYwF9D3LeBpZzmydg/tutkDXAJgy1/PqATGlxptgkQL2d4MOTDD+Dl
        DRZzvjslAAyyOMS9OmkIyioBUuMWUwvP8lqYv9PMsyyLdSDOTgQZRDoe03NxQCclQJrZYgmkxS0Binm+
        9bFsP5dQyDjyaaGS3VS0dwnbeHiS2bEdvHc6AdJMEyC1k2qAwV0gARp5kfKgT6/ibq6jP2l4qaeS1bxI
        ScA+JfwPD8a23nayk3PQos1dSHncO4FevOxhoGlMI6iMSww7gi5EyXyf/UH77WZeUIzD2ddduoGQRX/T
        n+Xh7pQaoI/FcncD4rQg1sa2iVntbuBxg6p9LE9xbcBn5XwUy1CcTQCrNnd+J60+lmbRN4lPTHVsDBh/
        HcZvyTOpJx8MKMMLbDRoPXRSAlTxEntoMf252+ISMMhyyKWGN9geUUzHeIm9FgPc1jFZJUA1f2JnDMr8
        OJ8GfHIL4033voYbAj7ZxqmukgAbuZdv8Qu2m+Ski+GmHcFLTUe3j/ESN/GvLLdILXPrWcQ8fsnfTWJK
        sRigLjSNtpIX+C63siImCeA/7p/LHIu9k5kTcHeixnrpx3BF3oBo5M72M+ff+cBwtHq1yfMGqSwz/DvL
        eYKrfaNxkzgWdkwXuM33DYO5g3WGMf3Z5HaPm1WGf+chHmMyvQCYyvGoG17vBpTJaI5a7n8g4KKVy8cx
        bAZG8auHGNkhrBxu5E1OBLW5ja+4OWwO2LOFvfyeCR3qhSz+GnZM+/0WuMrlO/xvUEwlJp29fuwIiukL
        HmZch5iyeT/qIv9jwHDzNJubYscY7bd/Ju92jQRYHjSW72Ymz/t1pU7wVcPCvoyyDns18xm/YWRQBfxT
        WsKM6dWgsfwMZvGC3zlWzRTDmEbyZYe9mijmlwaXsF9FXeQvBoy+zLK5A1kVMHPDzVtdIQEuMN+wGHtx
        Da9xJqhK9jeHs+1nWQk/5zLDvaZQFVZM9XzfJKZpLG//xnr+xXCvG6lrj2kXP6XQpFFW05MSIPKRwAo2
        G37eyMcUs4qFTKcXvRhhuNdE36Mg+1jG68HLF/rsoZjrwojJrI/cyFZ2MoeFFNGLVJOYrvSNTHzBMlZw
        0OQ7StnFLHqMyBNgi9HCoz4e/swWbuYermAU7qDh4DQmAYdYyWuUWnzHWTaElQCb/NfAC4jpLTbzPe5m
        HKMMhoMzmAgc4HWWsdfiO06zQQkAF/iAC5Z71PAsa7mTK8gKSoBcsnmCl9lt29H7kJqQ74HX837Q7RN/
        1TzNGu5iNFlBCdCXDJbwKiV4bWM6SW7PSYHIrh17uTykvz2ZMQYdwT6MCTH1+rA+5JhKbJ72sY4pl9Eh
        PneXw6ae0waIdCBoi0Vl21Ezn1NrUI1+bnOudqxwQ7WRyihiOkmp+WsV/JwKIyYjgWWeZJN4KWHuH5bI
        LgENvB/L8WhLG0KscD28H+IBjEVMi+gTwe+dopRKtgZcZI6xkgzTC08SZwKGfptYTxMFjKJ3LP4xkVQc
        pSZdJCfksDGkmIptHkCLpb5sjaDb/C6zySU96KRzkWqzJQWdtun05Zusp6lzxgGej+uSsg+FFNMTcZ1m
        8nDYh/9RB966NpDnwx4qi0EC1PEd4ulrQYO5wdtZ5sY1ppmcCqvMVjv00r0CtsS/EXiebEbRPy4zaDIp
        oC91tvt5yGVknB4yyaSAnBBiuug0j3Vcoj2GjvCE6UN3IYlkalgLddRRRRmHfP9VUYcnopu3xtLJppAx
        jGE0I+lHlm27t4U6aqniEGW+mI7HOCa3L6bRjGEEeWSG0Rb/hG85lABQwAd+N+XCFMm13EUWWeQzAfDi
        oY5qyiijnMMcppJznI/g+fVLSCOdfEYzhjGMIp/evluwocc0kCsBL3V4qKaMQ5RzmAoqOYfH9FFQq5jS
        A2LKCiOmi76M/fP87Wo5Gu8E8K9BMsigP2MBqMfDOY5ymAqO8DHbLM/AFCYzhHQyyKAPAxnMIPrRO+rH
        spLIJLM9pvOc5xyVvpg+YodlTL2YwqWkkxkQU3RzmBoc7KC2XHz5Q2S8Dm0f8w+2B2ouxTRF3Y4NfdvM
        ZNuY/pESmmMc03IHJ8H1Zk1nPQ9gvjWy0uSOW6BpEfSoI719vSzEKRUz+VuMvzvBEsDDYnJC/gcMZ1Uc
        6oA6Hg5j7G4Mf1ECRLqd49dhTrHOZ5nDKXCGn4XZsijgTSVAJNspfhzBP3YAf6TZscN/ggURtN0HsTJm
        aZkwCVDDXRb9iv4WZ2EerzpUCxxnvkWPfYDFoRnISiVAeGfaHRZFncYfgqY5+V8I3nTk8P+bxT2CdB5j
        huWF4B0lQOiH/y7LsbGrOc7LlutvFPJejA9/NfMtbxEVUcNzlmMhw1inBAhlO8ndloc/mf/CS6VNP3xU
        0GyB6C5It1se/hSewcthm+Xyr+ATJYB90+8HNmOK4ziEFy9/sLlpOylockbkh/8Om9H6CRzGi5dHbJaq
        uZpdSgDrw/9D2yHltnv6+xlls2cRpXG4IEESj/j2LfWbTWRkdpRz8nt0Apxmoe3hv5wS394t/Nr2nzTH
        b9aQExek1qv7F769m3nANqZ5VCgBjM/+RSH0sX/SoZf/qc3qgQA3RbVSxwnuCeEm1wMdYtpms3YYwC1h
        zlJKiARo4vch3BUf5De23siCEP5ZP+NCxDE9FMLDYQV+bY0L7fOcrfyGxp6XANE9R5fMLK61Le6bmdjh
        /1K4zfb5/SLmRnyjOplrmWW7AuH3/Nr+vbjdtg6YwfXOrdfbmaJtAxzj55a3WYazO+A3mvmFxf7p3BV1
        G6CS+y0fmR7J50H1xn0W+7tZ4Osx6BJgsF3gT76HL4K52tvaHbcvTPsCBTwdk2WRG1geMKu+Yx2x2OA3
        dpv2BQpZike9AOttFzcZNgYnmywG96hhdTotjIlg9ttObjC8kFzNEcP9f2d44ZgZ5USwBEkALyd5JGhR
        uFT+22TvCqYGVf13+gaLYrfV8FDQ1NI0XjHZ+xBXBlX9P4yq6k+oBPDSxOqAw3qdxRP9L/oVSgFPObIi
        fhPvMMkvprkWT/Q/7VeLRV/1t20rHVyEPtpFa2Jc4Pu4vf2mbxZvW/bWr/Or+p17JGQPt7YnW7bl+jpV
        Hd6jHouqv21bR7ZjCdCfnV0pAbzU8pSvm/fP7UuuGG9vkQWkcQcHHTv4rdtZHvfNHLzV5px+HXcMq/62
        7UsH3888I8r3rjhS4BuZwSDbSZ21/BMDedKpl6H4bS2sp4gCPrLZ7wzz+ErMqv6L2zMOtQKyWBFlZA4V
        eDl/oT6EdvqmOD4UfpB3abDda5sjzymf4TYHJq/24secjy4yJ18bJx3VsJQXQlxWIxRJXM5C5kfZuvAm
        cb6TFm1OPM0Us5kj0c7kASCNQmYwNuqTtz6JGocmLovpWReT8z82TqRQqwSIs650ya11OfM2OukmjrlM
        V8SURHDQxX68KocE5WW/i12mry2Wnu4cu1zspEolkaCq2OniKMUqiQRVzFEXHjbFcCkl6T5a2ITHBazj
        iEojAR1hXevCxQfYpNJIQJs40JoADbyhnkDCOccbNLQtXf4hG1UiCWYjH0JbApzjFYMV9KXnquWV1lq/
        7SGFtbyjUkkg77C29Q9tT+c3UsHXI3oJgnQ/5dxPmX8CwFFSmNkzZ7+Jnwv8J6va/qfjAd/NEIu3WEtP
        sYLfXXwqqWMCNFDCVApUQj3a/3Ffx5dr+Vf5JyjlGvJUSj1WKQv5tOMHgdf8Cg5QpMZgD1XGosBX3gU3
        +vazj8khv61Tuo893Mt7gR8atfr3Ucz4EFbNke5kBwtYF/yxcbfvMFsZwIi4vohNnNPE29zLdqMfmfX7
        q/mAesN37Ep3U8US/sPsXe/mAz/n2cI2+jIkri+JlNhq4D3uZ5n5q+XsJin04bvMZ7KDK1yIcwd/O6+w
        itNWO4UyS6U/3+QWJofxGhjpbKfYzgpWc9xux1CnKWUzgTnMYig5uiR0YU2c4gAbWEMxZ0L5hXDmqSWR
        y2VMYiyFFJJHCskkR/TuUYmVJLw000wT1ZRTTgl/5xAnQz8mSRF9qRs3mbhxk6bVBTqZl3o8eKjFg0cn
        o4iIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiIiI
        iIiIiIiIiEi8/D9RU9pr7LbpcQAAAABJRU5ErkJggg==
</value>
  </data>
</root>